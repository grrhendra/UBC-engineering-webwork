##DESCRIPTION
##
## Created by the UBC Department of Mechanical Engineering. Project led by Agnes d'Entremont.
##
## Contact: agnes.dentremont@mech.ubc.ca
##
## This work is licensed under the Creative Commons
## Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
## <https://creativecommons.org/licenses/by-sa/4.0/>
##
## We gratefully acknowledge the financial support for this 
## project provided by UBC Vancouver students via the Teaching
## and Learning Enhancement Fund. We also gratefully acknowledge
## additional funding support from BCcampus, the UBC Department of
## Mechanical Engineering, and the UBC Applied Science Deanâ€™s Office.  
##
## This work was completed on the traditional, ancestral, and unceded
## territory of the Musqueam people. 
##
##ENDDESCRIPTION

##DESCRIPTION
## 
##ENDDESCRIPTION

## DBsubject()
## DBchapter()
## DBsection()
## Date()
## Author()
## Level()
## KEYWORDS('')
## Institution('University of British Columbia')
## TitleText('TBD')
## EditionText('TBD')
## AuthorText('TBD')
## Section('TBD')
## Problem('TBD')
##############################################################

DOCUMENT();

#image scale
$imgScale = .2;

#image aspect ratio
$width = $imgScale*1758;
$height = $imgScale*827;

loadMacros(   
	"PGstandard.pl",     # Standard macros for PG language
	"MathObjects.pl",
	"PGML.pl",
	"parserPopUp.pl",
	"parserMultiAnswer.pl",
	"parserRadioButtons.pl",
	"parserFunction.pl"
	#"source.pl",        # allows code to be displayed on certain sites.
	#"PGcourse.pl", 	 # Customization file for the course
   	);

##############################################################
#
#  Setup
#
#

Context("Complex");
Context()->variables->add(n=>"Real");
Context()->variables->add(M=>"Real");
parserFunction("x(n)"=>"sin(8*n/pi/2.78132)+6.52*n^6");

#given
do{$alpha = random(-15,15,1);}while($alpha == 0 or $alpha == 1 or $alpha == -1);
do{$beta = random(-15,15,1);}while($beta == 0 or $beta == 1 or $beta == -1);
$a = random(2,15,1);

$mcYes = PopUp(["?","Yes","No"], "Yes");
$mcNo = PopUp(["?","Yes","No"], "No");

#computation 
$y1a = Formula("x(n-M)*(($alpha + $beta)*n-$alpha*$beta)");
$y2a = Formula("x(n-M)*(($alpha + $beta)*(n-M)-$alpha*$beta)");
$y1c = Formula("2*x(n-M)*($alpha + $beta)*(1+(-1)^n)");
$y2c = Formula("2*x(n-M)*($alpha + $beta)*(1+(-1)^(n-M))");

##############################################################
#
#  Text 
#
#

BEGIN_PGML

The input [`x[n]`] to the discrete time system [`S`] produces an output [`y[n]=x[n]([$alpha]g[n] +[$beta]g[n-[$a]] )`] 

*a)* Given that [`D_M`] is a system that delays the input by [`M`] samples, find the outputs [`y_1[n]`] and [`y_2[n]`] as shown in the figure when [`g[n]=n`].

[@ image("UBC-SIG-18-066.png", width=>[$width], height=>[$height], tex_size=>500) @]*


[`y_1[n]=`] [____________________]  
[`y_2[n]=`] [____________________]

*b)* Is the system in part *a* time-invariant? [@ $mcNo->menu() @]*

*c)* Find an expression of [`y_1[n]`] and [`y_2[n]`] shown in the figure below if [`g[n]=1+ (-1)^n`].

[@ image("UBC-SIG-18-066.png", width=>[$width], height=>[$height], tex_size=>500) @]*

[`y_1[n]=`] [____________________]  
[`y_2[n]=`] [____________________]

*d)* Is the system in part *c* time-invariant? [@ $mcNo->menu() @]*

_In your answers, enter [`z(n)`] for a discrete-time function [`z[n]`]. WebWork is unable to parse a function that uses square brackets._

_Part *b* will only be marked correct if part *a* is correct. Part *d* will only be marked correct if part *c* is correct._ 

END_PGML

ANS($y1a->cmp);
ANS($y2a->cmp);

$ans_hash1 = $y1a->cmp->evaluate($inputs_ref->{ANS_NUM_TO_NAME(1)});
$a1Correct= $ans_hash1->{score};
$ans_hash2 = $y2a->cmp->evaluate($inputs_ref->{ANS_NUM_TO_NAME(2)});
$a2Correct= $ans_hash2->{score};

ANS($mcNo->cmp(checker=>sub{
		my ($correct,$student) = @_; 
		if (($student == $correct)&& $a1Correct==1 && $a2Correct==1) {
			return 1;
		}else {
			return 0;
		}	
	}));

ANS($y1c->cmp);
ANS($y2c->cmp);

$ans_hash4 = $y1c->cmp->evaluate($inputs_ref->{ANS_NUM_TO_NAME(4)});
$c1Correct= $ans_hash4->{score};
$ans_hash5 = $y2c->cmp->evaluate($inputs_ref->{ANS_NUM_TO_NAME(5)});
$c2Correct= $ans_hash5->{score};

ANS($mcNo->cmp(checker=>sub{
		my ($correct,$student) = @_; 
		if (($student == $correct)&& $c1Correct==1 && $c2Correct==1) {
			return 1;
		}else {
			return 0;
		}	
	}));

##############################################################

ENDDOCUMENT();
